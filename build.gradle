plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'web'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    asciidoctorExt // (2)
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
dependencies {
    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'
    // gson (json 관련)
    implementation 'com.google.code.gson:gson:2.8.9'
    // h2 db
    runtimeOnly 'com.h2database:h2'
    // lombok
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // rest api doc
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor' // (3)
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // (4)
}

ext {
    snippetsDir = file('build/generated-snippets') // (5)
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir // (6)
}

asciidoctor {
    configurations 'asciidoctorExt' // (7)
    sources {
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile() // 여러 문서를 include할 때 경로를 찾아주는 코드
    inputs.dir snippetsDir // (9)
    dependsOn test // (10)
}
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')  // (11)
}

task copyDocument(type: Copy) { // (12)
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}
build {
    dependsOn copyDocument
}
bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {//asciidoc 조각을 html로 변환 후 서버를 실행하여 API를 공유하기 위함
        into 'static/docs'
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}